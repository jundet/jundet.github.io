<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GISTime</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.gistime.cn/"/>
  <updated>2018-10-27T12:04:47.514Z</updated>
  <id>http://www.gistime.cn/</id>
  
  <author>
    <name>GISTime</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习课程——糖尿病预测</title>
    <link href="http://www.gistime.cn/2018/10/25/MLclass/"/>
    <id>http://www.gistime.cn/2018/10/25/MLclass/</id>
    <published>2018-10-25T13:36:57.000Z</published>
    <updated>2018-10-27T12:04:47.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机器学习课程——糖尿病预测"><a href="#机器学习课程——糖尿病预测" class="headerlink" title="机器学习课程——糖尿病预测"></a>机器学习课程——糖尿病预测</h1><p> <a href="https://github.com/jundet/MLClass" target="_blank" rel="noopener">code</a></p><h4 id="具体流程为"><a href="#具体流程为" class="headerlink" title="具体流程为"></a>具体流程为</h4><ol><li><p>数据预处理</p></li><li><p>模型构建</p></li><li><p>实验结果</p></li></ol><h3 id="1、数据预处理"><a href="#1、数据预处理" class="headerlink" title="1、数据预处理"></a>1、数据预处理</h3><p><img src="/2018/10/25/MLclass/数据处理.png" alt="数据处理"></p><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><p>对数据集进行划分和归一化等常规操作后观察到两种类别存在不平衡的问题，这会对模型的训练产生偏差。为了解决该问题使用生成对抗网络（GAN）进行训练并产生新的数据加入到训练数据集中以平衡两种类别。生成对抗网络（GAN）能够学习到原有数据集的分布情况，产生的数据能与原有数据保持相同的分布即新的数据可以在一定程度（GAN的设计与训练的好坏）上认为是真实的样本。</p><p><img src="/2018/10/25/MLclass/Mlclass/GAN.png" alt="GAN"></p><h3 id="2、模型构建"><a href="#2、模型构建" class="headerlink" title="2、模型构建"></a>2、模型构建</h3><p>1、分别使用神经网络（NN）、随机树（ET）、逻辑回归（Logistic）、支持向量机（SVM）、GradientBoosting（gdbt）、AdaBoost、XGBoost、LightGBM、CatBoost等模型对数据集进行训练和测试。</p><p>2、尝试使用单模型进行融合，使用融合后的模型对数据进行训练和测试。模型融合使用多数投票分类器。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/25/MLclass/Mlclass/融合.png" alt="融合" title="">                </div>                <div class="image-caption">融合</div>            </figure><h3 id="3、实验结果"><a href="#3、实验结果" class="headerlink" title="3、实验结果"></a>3、实验结果</h3><div class="table-container"><table><thead><tr><th></th><th>模型融合</th><th>神经网络</th><th>CatBoost</th></tr></thead><tbody><tr><td>accuracy</td><td>83.1%</td><td>82.1%</td><td>82.4%</td></tr><tr><td>F1-score</td><td>72.0%</td><td>70.2%</td><td>70.6%</td></tr></tbody></table></div><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/25/MLclass/Mlclass/模型融合.png" alt="模型融合" title="">                </div>                <div class="image-caption">模型融合</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/25/MLclass/Mlclass/模型融合(GAN).png" alt="模型融合(GAN)" title="">                </div>                <div class="image-caption">模型融合(GAN)</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;机器学习课程——糖尿病预测&quot;&gt;&lt;a href=&quot;#机器学习课程——糖尿病预测&quot; class=&quot;headerlink&quot; title=&quot;机器学习课程——糖尿病预测&quot;&gt;&lt;/a&gt;机器学习课程——糖尿病预测&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://github.c
      
    
    </summary>
    
      <category term="机器学习" scheme="http://www.gistime.cn/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://www.gistime.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="生成对抗网络" scheme="http://www.gistime.cn/tags/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>基于局部和精细化分割的行人重识别</title>
    <link href="http://www.gistime.cn/2018/10/15/PCB/"/>
    <id>http://www.gistime.cn/2018/10/15/PCB/</id>
    <published>2018-10-15T10:37:53.000Z</published>
    <updated>2018-10-25T09:00:16.568Z</updated>
    
    <content type="html"><![CDATA[<p>(PCB+RPP)Beyond Part Models: Person Retrieval with Refined Part Pooling (and a Strong Convolutional Baseline)</p><p><a href="https://arxiv.org/abs/1711.09349v3" target="_blank" rel="noopener">Paper</a>,<a href="https://github.com/GenkunAbe/reID-PCB" target="_blank" rel="noopener">code1</a>,<a href="https://github.com/syfafterzy/PCB_RPP_for_reID" target="_blank" rel="noopener">code2</a></p><p>Market1501： rank1：93.8，mAP：81.6</p><p>PCB（Part-based Convolutional  Baseline）：基于局部信息能够获得细粒度特征，对人体的水平分割比较符合人体分布，在一定程度上保护有效信息源，使其不被割裂。</p><p>RPP（Refined Part Pooling）：实现了人体分割中的软分割，在原有水平分割的基础上再进行相应训练，融入对抗训练的思想使的再分割后的图像更加符合细粒度的特征提取，有效的解决了硬性分割带来的有效信息割裂的问题，保证了信息的完整性。</p><p><a href="https://zhuanlan.zhihu.com/p/31947809" target="_blank" rel="noopener">相关解读1</a> <a href="https://blog.csdn.net/Gavinmiaoc/article/details/80350613" target="_blank" rel="noopener">相关解读2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;(PCB+RPP)Beyond Part Models: Person Retrieval with Refined Part Pooling (and a Strong Convolutional Baseline)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://arx
      
    
    </summary>
    
      <category term="行人再识别" scheme="http://www.gistime.cn/categories/%E8%A1%8C%E4%BA%BA%E5%86%8D%E8%AF%86%E5%88%AB/"/>
    
    
      <category term="多尺度" scheme="http://www.gistime.cn/tags/%E5%A4%9A%E5%B0%BA%E5%BA%A6/"/>
    
      <category term="行人再识别" scheme="http://www.gistime.cn/tags/%E8%A1%8C%E4%BA%BA%E5%86%8D%E8%AF%86%E5%88%AB/"/>
    
      <category term="soft-attention" scheme="http://www.gistime.cn/tags/soft-attention/"/>
    
  </entry>
  
  <entry>
    <title>学习多粒度显著特征用于跨境追踪技术</title>
    <link href="http://www.gistime.cn/2018/10/10/MGN/"/>
    <id>http://www.gistime.cn/2018/10/10/MGN/</id>
    <published>2018-10-10T04:37:53.000Z</published>
    <updated>2018-10-10T05:11:20.332Z</updated>
    
    <content type="html"><![CDATA[<p>(MGN)Learning Discriminative Features with Multiple Granularity for Person Re-Identification</p><p><a href="http://www.sohu.com/a/238041608_633698" target="_blank" rel="noopener">视频介绍</a> ,<a href="https://arxiv.org/abs/1804.01438" target="_blank" rel="noopener">Paper</a>,<a href="https://github.com/seathiefwang/MGN-pytorch" target="_blank" rel="noopener">code1</a>,<a href="https://github.com/levyfan/reid-mgn" target="_blank" rel="noopener">code2</a></p><p>Market1501： rank1：95.7，mAP：86.9</p><p>利用多粒度实现了对全局和局部信息特征的同时提取。其中全局特征模块中对人的整体特征进行的提取可以更好的关注人的整体结构，对图片进行2分和3分的分割对人的局部信息进行提取。该网络依赖ResNet，ResNet大大提高了准确率（ResNet50本身可以达到 Market1501： rank1：89.13，mAP：73.5）</p><p>多粒度的思想能充分提取特征。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;(MGN)Learning Discriminative Features with Multiple Granularity for Person Re-Identification&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.sohu.com/a/238041
      
    
    </summary>
    
      <category term="行人再识别" scheme="http://www.gistime.cn/categories/%E8%A1%8C%E4%BA%BA%E5%86%8D%E8%AF%86%E5%88%AB/"/>
    
    
      <category term="多尺度" scheme="http://www.gistime.cn/tags/%E5%A4%9A%E5%B0%BA%E5%BA%A6/"/>
    
      <category term="行人再识别" scheme="http://www.gistime.cn/tags/%E8%A1%8C%E4%BA%BA%E5%86%8D%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>算法导论</title>
    <link href="http://www.gistime.cn/2018/10/08/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    <id>http://www.gistime.cn/2018/10/08/算法导论/</id>
    <published>2018-10-08T13:36:57.000Z</published>
    <updated>2018-10-12T14:14:53.765Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法导论"><a href="#算法导论" class="headerlink" title="算法导论"></a>算法导论</h1><h2 id="第一章-算法在计算中的应用"><a href="#第一章-算法在计算中的应用" class="headerlink" title="第一章 算法在计算中的应用"></a>第一章 算法在计算中的应用</h2><h3 id="1-2-作为一种技术的算法"><a href="#1-2-作为一种技术的算法" class="headerlink" title="1.2 作为一种技术的算法"></a>1.2 作为一种技术的算法</h3><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>1.2-2 插入排序运行步数为$8n^2$步，而归并排序运行$64nlgn$ 步，问对哪些n值，插入排序优于归并排序？<br>    $8n^2 &lt; 64nlgn$，n=2,3</p><p>1.2.3 n最小值为何值时，运行时间为$100n^2$的一个算法在相同机器上快于运行时间为$2^n$ 的另一个算法？<br>    $100n^2  &lt; 2^n$,n=15</p><h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><p>1-1 （运行时间比较）假设求解问题的算法需要$f(n)$ 毫秒，对下表中每个函数$f(n)$ 和时间t，确定可以在时间t内求解的问题的最大规模n。</p><div class="table-container"><table><thead><tr><th></th><th>1秒钟</th><th>1分钟</th><th>1小时</th><th>1天</th><th>1月</th><th>1年</th><th>1世纪</th></tr></thead><tbody><tr><td>$lgn$</td><td>$10^4$</td><td>$6\times 10^5$</td><td>$3.6\times 10^7$</td><td>$8.64\times10^8$</td><td>$2.592\times10^{10}$</td><td>$3.1536\times10^{11}$</td><td>$3.1536\times10^{13}$</td></tr><tr><td>$\sqrt{n}$</td><td>$10^6$</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>$n$</td><td>$10^3$</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>$nlgn$</td><td>386</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>$n^2$</td><td>31</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>$n^3$</td><td>10</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>$2^n$</td><td>9</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>$n!$</td><td>6</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div><h2 id="第二章-算法基础"><a href="#第二章-算法基础" class="headerlink" title="第二章 算法基础"></a>第二章 算法基础</h2><h3 id="2-1-插入排序"><a href="#2-1-插入排序" class="headerlink" title="2.1 插入排序"></a>2.1 插入排序</h3><h4 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSERTION-SORT(A)</span><br><span class="line">for j = 2 to A.length</span><br><span class="line">key = A[j]</span><br><span class="line">//inster A[j] into the sorted sequence A[1..j-1]</span><br><span class="line">i = j-1</span><br><span class="line">while i&gt;0 and A[i]&gt;key</span><br><span class="line">A[i+1] = A[i]</span><br><span class="line">i = i-1</span><br><span class="line">A[j+1] = key</span><br></pre></td></tr></table></figure><h4 id="python-实现"><a href="#python-实现" class="headerlink" title="python 实现"></a>python 实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertion_sort</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,len(A)):</span><br><span class="line">        key = A[j]</span><br><span class="line">        i = j<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> i&gt;<span class="number">-1</span> <span class="keyword">and</span> A[i]&gt;key:</span><br><span class="line">            A[i+<span class="number">1</span>] = A[i]</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        A[i+<span class="number">1</span>] = key</span><br><span class="line">    <span class="keyword">return</span> A</span><br></pre></td></tr></table></figure><h4 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h4><p>2.1-2 重写INSERTION-SORT，使之按降序排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertion_sort</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,len(A)):</span><br><span class="line">        key = A[j]</span><br><span class="line">        i = j<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> i&gt;<span class="number">-1</span> <span class="keyword">and</span> A[i]&lt;key: <span class="comment"># 将原来的A[i]&gt;k改为 A[i]&lt;k</span></span><br><span class="line">            A[i+<span class="number">1</span>] = A[i]</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        A[i+<span class="number">1</span>] = key</span><br><span class="line"><span class="keyword">return</span> A</span><br></pre></td></tr></table></figure><p>2.1-3 考虑以下查找问题：<br>    输入：n个数的一个序列A=<a<sub>1&lt;/sub&gt;，a<sub>2</sub>,…,a<sub>n</sub>&gt;    和一个数v<br>    输出：当v=A[i]时输出下标i，当v不在A中时输出特殊值 NIL<br>    写出线性查找的伪代码，它扫描整个序列来查找v。使用一个循环不变是来证明你的算法正确性。确保你的循环不变式满足三个必要的性质。</a<sub></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">j = -1</span><br><span class="line">for i = 0 to A.length:</span><br><span class="line">if A[i] == v</span><br><span class="line">j = i</span><br><span class="line">break</span><br><span class="line">else:</span><br><span class="line">       i++</span><br><span class="line">if j == -1:</span><br><span class="line">return NIL</span><br><span class="line">else:</span><br><span class="line">return j</span><br></pre></td></tr></table></figure><p>2.1-4 考虑将将两个n位二进制整数加起来，这两个整数分别存储在两个n位数组中A和B中，这两个整数的和应该按照二进制形式存储在一个（n+1）元数组C中，写出伪代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">z = 0</span><br><span class="line">for j = 1 to n：</span><br><span class="line">i = n - j</span><br><span class="line">m = A[i] + B[i] + z</span><br><span class="line">if m%2==0:</span><br><span class="line">c[i+1] = 0</span><br><span class="line">else:</span><br><span class="line">c[i+1] = 1</span><br><span class="line">if m&gt;1:</span><br><span class="line">z = 1</span><br><span class="line">else:</span><br><span class="line">z = 0</span><br><span class="line">j++</span><br></pre></td></tr></table></figure><h3 id="2-2-分析算法"><a href="#2-2-分析算法" class="headerlink" title="2.2 分析算法"></a>2.2 分析算法</h3><h5 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h5><p>2.2-1 用$\Theta$ 记号表示函数$n^3/1000 - 100n^2 -100n +3$</p><p>$\Theta(n^3)$</p><p>2.2-1 对储存在数组A中的n个数进行排序：首先找出A中最小元素并将其与A[1]中的元素进行交换。接着找出A中的次最小元素并将其与A[2]中的元素进行交换。对A中前n-1个圆度按照该方式继续，该算法叫做选择排序，写出其伪代码。用$\Theta$给出选择排序的最好情况与最坏情况运行的时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for i = 0 to A.length      </span><br><span class="line">min = a[i]</span><br><span class="line">tempj = i</span><br><span class="line">for j = A.length - i to A.length  </span><br><span class="line">if a[j] &lt; min:</span><br><span class="line">min = a[j]</span><br><span class="line">tempj = j</span><br><span class="line">temp = a[i]</span><br><span class="line">a[i] = min</span><br><span class="line">a[j] = temp</span><br></pre></td></tr></table></figure><p>最好情况时即已经排序好，则为$\Theta(n)$，最坏的情况为逆序，则为$\Theta(n^2)$</p><p>2.2-3 线性查找平均需要检查输入序列的多少个元素，最坏的情况又如何？</p><p>平均查找需要$\theta(n/2)$,最坏需要$\theta(n)$</p><h3 id="2-3-设计算法"><a href="#2-3-设计算法" class="headerlink" title="2.3 设计算法"></a>2.3 设计算法</h3><h4 id="2-3-1-分治法"><a href="#2-3-1-分治法" class="headerlink" title="2.3.1 分治法"></a>2.3.1 分治法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">MERGE(A, p, q, r)</span><br><span class="line">n1 = q - p + 1</span><br><span class="line">n2 = r - q</span><br><span class="line">let L[1..n1 + 1] and R[1..n2 + 1] by new arrays</span><br><span class="line">for i = 1 to n1</span><br><span class="line">L[i] = A[p + i -1]</span><br><span class="line">for j =  1 to n2</span><br><span class="line">R[j] = A[q + j]</span><br><span class="line">L[n1 + 1] = &amp; infin;</span><br><span class="line">L[n2 + 1] = &amp; infin;</span><br><span class="line">i = 1</span><br><span class="line">j = 1</span><br><span class="line">for k = p to r</span><br><span class="line">if L[i] &lt;= R[j]</span><br><span class="line">A[k] = L[i]</span><br><span class="line">i = i + 1</span><br><span class="line">else </span><br><span class="line">A[k] = R[j]</span><br><span class="line">j = j + 1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MEGRE-SORT(A, p, r)</span><br><span class="line">if p &lt; r</span><br><span class="line">q = [(p+r)/2]</span><br><span class="line">MEGRE-SORT(A, p, q)</span><br><span class="line">MEGRE-SORT(A, q+1, r)</span><br><span class="line">MERGE(A, p, q, r)</span><br></pre></td></tr></table></figure><p>归并排序算法python实现</p><h2 id="第3章-函数的增长"><a href="#第3章-函数的增长" class="headerlink" title="第3章 函数的增长"></a>第3章 函数的增长</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;算法导论&quot;&gt;&lt;a href=&quot;#算法导论&quot; class=&quot;headerlink&quot; title=&quot;算法导论&quot;&gt;&lt;/a&gt;算法导论&lt;/h1&gt;&lt;h2 id=&quot;第一章-算法在计算中的应用&quot;&gt;&lt;a href=&quot;#第一章-算法在计算中的应用&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="算法" scheme="http://www.gistime.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://www.gistime.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
